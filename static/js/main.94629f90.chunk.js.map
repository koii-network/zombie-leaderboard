{"version":3,"sources":["helper.js","nft.js","App.js","reportWebVitals.js","index.js"],"names":["a","fetch","json","nfts","keys","zombieList","sort","b","zombies","slice","i","length","id","name","views","Nft","nft","className","style","width","margin","paddingBottom","minHeight","boxShadow","offset","loading","maxHeight","border","src","title","alt","display","paddingRight","target","href","App","useState","setZombies","useEffect","mapNftToZombies","then","textShadow","map","object","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gSAGO,gCAAAA,EAAA,sEACqBC,MAAM,8CAD3B,8BAC0EC,OAD1E,OAML,IALMC,EADD,OAESC,eAAKD,GACnBE,EAAWC,MAAK,SAACN,EAAGO,GAAJ,OAAWJ,EAAKI,IAAM,IAAMJ,EAAKH,IAAM,MACjDQ,EAAUH,EAAWI,MAAM,EAAG,IAE3BC,EAAI,EAAGA,EAAIF,EAAQG,SAAUD,EACpCF,EAAQE,GAAK,CACXE,GAAIJ,EAAQE,GACZG,KAAML,EAAQE,GACdI,MAAOX,EAAKK,EAAQE,KAAO,GAV1B,yBAaEF,GAbF,6C,wDCsDQO,EAtDH,SAAC,GAAa,IAAXC,EAAU,EAAVA,IACb,OAEI,qBAAKC,UAAU,8CAAf,SACE,sBACEA,UAAU,OACVC,MAAO,CACLC,MAAO,OACPC,OAAQ,SACRC,cAAe,OACfC,UAAW,QACXC,UAAW,gCAPf,UAUE,cAAC,IAAD,CAAUC,OAAQ,IAAlB,SACA,wBACAC,QAAQ,OACNR,UAAU,eACVC,MAAO,CAAEQ,UAAW,QAASJ,UAAW,QAAQK,OAAO,KACvDC,IAAG,8BAAyBZ,EAAIJ,IAChCiB,MAAOb,EAAIJ,GACXkB,IAAI,UAGN,sBAAKb,UAAU,YAAf,UACE,oBAAIA,UAAU,aAAd,SACED,EAAIJ,KAeN,oBAAGM,MAAO,CAAEa,QAAS,eAAgBC,aAAc,OAAnD,UACC,uCADD,IACgBhB,EAAIF,MAClB,mBAAGI,MAAO,CAAEa,QAAS,SAAWE,OAAO,SAASC,KAAI,4CAAuClB,EAAIJ,IAAOK,UAAU,kBAAhH,mCCVCkB,MA1Bf,WAAgB,IAAD,EACiBC,mBAAS,IAD1B,mBACN5B,EADM,KACG6B,EADH,KAKb,OAHAC,qBAAU,YFTL,WAAP,gCEUIC,GAAkBC,KAAKH,KACtB,IAGD,qBAAKpB,UAAU,MAAf,SACE,sBAAKA,UAAU,YAAf,UACE,oBACEA,UAAU,0CACVC,MAAO,CAAEE,OAAQ,SAAUqB,WAAY,oBAFzC,yBAMA,qBAAKxB,UAAU,MAAf,SACCT,EAAQkC,KAAI,SAACC,EAAQjC,GAAT,OAAe,cAAC,EAAD,CAAKM,IAAK2B,GAAajC,cCd5CkC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBN,MAAK,YAAkD,IAA/CO,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCFdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.94629f90.chunk.js","sourcesContent":["import zombieList from \"./zombies.json\";\nimport { isEmpty, keys } from \"lodash\";\n\nexport async function mapNftToZombies() {\n  const nfts = await (await fetch(\"https://mainnet.koii.live/attention/latest\")).json();\n  const nKeys = keys(nfts);\n  zombieList.sort((a, b) => (nfts[b] || 0) - (nfts[a] || 0));\n  const zombies = zombieList.slice(0, 10);\n\n  for (let i = 0; i < zombies.length; ++i)\n    zombies[i] = {\n      id: zombies[i],\n      name: zombies[i],\n      views: nfts[zombies[i]] || 0\n    }\n\n  return zombies;\n}\n","import React from \"react\";\nimport LazyLoad from 'react-lazyload';\n\nconst Nft = ({ nft }) => {\n  return (\n\n      <div className=\"col-xl-3 col-lg-6 col-md-12 col-sm-12  mb-5\">\n        <div\n          className=\"card\"\n          style={{\n            width: \"100%\",\n            margin: \"0 auto\",\n            paddingBottom: \"10px\",\n            minHeight: \"500px\",\n            boxShadow: \"2px 3px 7px rgb(0 0 0 / 0.2)\",\n          }}\n        >\n          <LazyLoad offset={100}>\n          <iframe\n          loading=\"lazy\"\n            className=\"card-img-top\"\n            style={{ maxHeight: \"15rem\", minHeight: \"15rem\",border:\"0\" }}\n            src={`https://arweave.net/${nft.id}`}\n            title={nft.id}\n            alt=\"nft\"\n          />\n          </LazyLoad>\n          <div className=\"card-body\">\n            <h5 className=\"card-title\">\n             {nft.id}\n            </h5>\n            {/*\n            <p\n              className=\"card-text\"\n              style={{\n                width: \"250px\",\n                whiteSpace: \"nowrap\",\n                overflow: \"hidden\",\n                textOverflow: \"ellipsis\",\n              }}\n            >\n              {nft.description||\"description\"}\n            </p>\n            */}\n            <p style={{ display: \"inline-block\", paddingRight: \"5px\" }}>\n             <b>Views:</b> {nft.views}\n              <a style={{ display: \"block\" }} target=\"_blank\" href={`https://koi.rocks/content-details/${nft.id}`}  className=\"btn btn-primary\">\n                View NFT!\n              </a>\n            </p>\n          </div>\n        </div>\n      </div>\n\n  );\n};\n\nexport default Nft;\n","import \"./App.css\";\nimport { Button } from \"react-bootstrap\";\nimport { getZombiesList, mapNftToZombies, fetchNFTs } from \"./helper\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { useEffect, useState,Suspense,lazy} from \"react\";\n\nimport Nft from './nft';\n// const Nft = lazy(()=>import(\"./nft\")\n\n\nfunction App() {\n  const [zombies, setZombies] = useState([]);\n  useEffect(() => {\n    mapNftToZombies().then(setZombies);\n  }, []);\n  return (\n\n    <div className=\"App\">\n      <div className=\"container\">\n        <h3\n          className=\"d-flex justify-content-center mb-4 mt-2\"\n          style={{ margin: \"0 auto\", textShadow: \"0px 1px 3px #555\" }}\n        >\n          Top Zombies\n        </h3>\n        <div className=\"row\">\n        {zombies.map((object, i) => <Nft nft={object} key={i}></Nft>)}\n{/* \n        <Nft nft={zombies}></Nft> */}\n        </div>\n      </div>\n    </div>\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}